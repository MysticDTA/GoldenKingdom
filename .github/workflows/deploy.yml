name: CI + Deploy

on:
  push:
    branches: [ main, merge-dta ]
  pull_request:
    branches: [ main ]

jobs:
  generate-types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Generate Supabase types
        run: |
          set +e
          supabase gen types typescript \
            --project-id "$SUPABASE_PROJECT_REF" \
            --debug \
            > platform/src/lib/database.types.ts
          if [ $? -eq 0 ]; then
            echo "✅ Supabase types generated successfully"
          else
            echo "⚠️ Supabase type generation failed, keeping old types"
            git restore platform/src/lib/database.types.ts
          fi
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  build-deploy:
    runs-on: ubuntu-latest
    needs: generate-types
    steps:
      - name: Trigger Netlify build
        id: trigger
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🚀 Triggering Netlify Preview deploy for PR..."
            curl -s -X POST -d '{}' $NETLIFY_BUILD_HOOK_PREVIEW
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "🚀 Triggering Production deploy..."
            curl -s -X POST -d '{}' $NETLIFY_BUILD_HOOK_PROD
          elif [ "${{ github.ref }}" = "refs/heads/merge-dta" ]; then
            echo "🚀 Triggering Staging deploy..."
            curl -s -X POST -d '{}' $NETLIFY_BUILD_HOOK_STAGING
          fi
        env:
          NETLIFY_BUILD_HOOK_PROD: ${{ secrets.NETLIFY_BUILD_HOOK_PROD }}
          NETLIFY_BUILD_HOOK_STAGING: ${{ secrets.NETLIFY_BUILD_HOOK_STAGING }}
          NETLIFY_BUILD_HOOK_PREVIEW: ${{ secrets.NETLIFY_BUILD_HOOK_PREVIEW }}

      - name: Wait for Netlify build to finish
        id: wait
        run: |
          echo "⏳ Waiting for Netlify build..."
          for i in {1..30}; do
            status=$(curl -s -H "Authorization: Bearer $NETLIFY_AUTH_TOKEN" \
              https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys | jq -r '.[0].state')
            
            echo "Current status: $status"
            if [ "$status" = "ready" ]; then
              url=$(curl -s -H "Authorization: Bearer $NETLIFY_AUTH_TOKEN" \
                https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys | jq -r '.[0].deploy_url')
              echo "✅ Netlify build finished successfully: $url"
              echo "preview_url=$url" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$status" = "error" ]; then
              echo "❌ Netlify build failed"
              exit 1
            fi
            sleep 20
          done
          echo "⚠️ Netlify build did not finish in time"
          exit 1
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Comment on PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = "${{ steps.wait.outputs.preview_url }}";
            const body = `🚀 Netlify Preview ready: [${url}](${url})`;

            // Look for an existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.includes('Netlify Preview ready')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              });
            }
